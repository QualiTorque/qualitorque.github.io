"use strict";(self.webpackChunktorque=self.webpackChunktorque||[]).push([[2577],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(t),d=i,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||r;return t?a.createElement(h,s(s({ref:n},u),{},{components:t})):a.createElement(h,s({ref:n},u))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1465:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const r={sidebar_position:12,title:"The Shell Grain"},s=void 0,o={unversionedId:"blueprint-designer-guide/blueprints/shell-grain",id:"blueprint-designer-guide/blueprints/shell-grain",title:"The Shell Grain",description:'The Shell grain is an asset-agnostic grain that allows you to run bash/python3 commands as part of your environment\u2019s launch and/or teardown. It\u2019s useful if you need to prepare or clean up your environment\u2019s cloud infrastructure as part of the deployment. For example, you could use this grain to run "datree" validations on a Kubernetes grain\u2019s asset, or perhaps back up/clone a DB before environment deployment.',source:"@site/docs/blueprint-designer-guide/blueprints/shell-grain.md",sourceDirName:"blueprint-designer-guide/blueprints",slug:"/blueprint-designer-guide/blueprints/shell-grain",permalink:"/blueprint-designer-guide/blueprints/shell-grain",editUrl:"https://github.com/QualiTorque/torque-docs/tree/master/docs/blueprint-designer-guide/blueprints/shell-grain.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12,title:"The Shell Grain"},sidebar:"torqueSidebar",previous:{title:"The Kubernetes Grain\u200b",permalink:"/blueprint-designer-guide/blueprints/kubernetes-grain"},next:{title:"The OpenTofu Grain",permalink:"/blueprint-designer-guide/blueprints/opentofu-grain"}},l={},p=[{value:"agent",id:"agent",level:3},{value:"Tools and Technologies",id:"tools-and-technologies",level:3},{value:"inputs",id:"inputs",level:3},{value:"outputs",id:"outputs",level:3},{value:"commands",id:"commands",level:3},{value:"Using Multiline Shell Commands in YAML",id:"using-multiline-shell-commands-in-yaml",level:4}],u={toc:p},c="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'The Shell grain is an asset-agnostic grain that allows you to run bash/python3 commands as part of your environment\u2019s launch and/or teardown. It\u2019s useful if you need to prepare or clean up your environment\u2019s cloud infrastructure as part of the deployment. For example, you could use this grain to run "datree" validations on a Kubernetes grain\u2019s asset, or perhaps back up/clone a DB before environment deployment.'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Complete example")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"spec_version: 2\ndescription: Run a simple shell grain with inputs and outputs\n\ninputs:\n  script_input1:\n    type: string\n    default: 'input1'\n  agent:\n    type: agent\n\noutputs:\n  output_script_1:\n    value: '{{ .grains.run_shell_grain.activities.deploy.commands.my_script.outputs.output_script_1 }}'\n  output_script_2:\n    value: '{{ .grains.run_shell_grain.activities.deploy.commands.my_script.outputs.output_script_2 }}'  \n\ngrains:\n  run_shell_grain:\n    kind: shell\n    spec:\n      agent:\n        name: '{{ .inputs.agent }}'\n      files:\n        - source: my_scripts_repo\n          path: scripts/script.sh\n      activities:\n        deploy:\n          commands:\n            - name: my_script\n              command:  'source script.sh {{ .inputs.script_input1 }}'\n              outputs:\n                - output_script_1\n                - output_script_2\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"script.sh")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'input_1=$1\necho "input_1=$input_1"\n\n# run some cmds..\ncmd1_output=$(jq --arg ResourceId "..." \'.resources[] | .attributes | .instance_state\' $input_1)\ncmd2_output=$(jq --arg ResourceId "..." \'.resources[] | .attributes | .instance_state\' $input_1)\n\n# capture the outputs \nexport output_script_1=$cmd1_output\nexport output_script_2=$cmd2_output\n')),(0,i.kt)("h3",{id:"agent"},"agent"),(0,i.kt)("p",null,"Please see ",(0,i.kt)("a",{parentName:"p",href:"/blueprint-designer-guide/blueprints/blueprints-yaml-structure#agent"},"the grain agent")," for more details."),(0,i.kt)("h3",{id:"tools-and-technologies"},"Tools and Technologies"),(0,i.kt)("p",null,"The following tools and technologies are installed out of the box on our agents in the Kubernetes pods and can be used when writing grain scripts (pre/post, etc.):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"dotnet"),(0,i.kt)("li",{parentName:"ul"},"python3"),(0,i.kt)("li",{parentName:"ul"},"pip"),(0,i.kt)("li",{parentName:"ul"},"curl"),(0,i.kt)("li",{parentName:"ul"},"wget"),(0,i.kt)("li",{parentName:"ul"},"jq"),(0,i.kt)("li",{parentName:"ul"},"git"),(0,i.kt)("li",{parentName:"ul"},"zip"),(0,i.kt)("li",{parentName:"ul"},"unzip"),(0,i.kt)("li",{parentName:"ul"},"kubectl"),(0,i.kt)("li",{parentName:"ul"},"awscli")),(0,i.kt)("h3",{id:"inputs"},"inputs"),(0,i.kt)("p",null,"Inputs provided to the shell grain are used when launching the shell. "),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),(0,i.kt)("strong",{parentName:"h5"},"note"))),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Unlike other grains, in the shell grain, inputs are used inside the ",(0,i.kt)("strong",{parentName:"p"},"commands")," section, wrapped in double curly brackets - ",(0,i.kt)("inlineCode",{parentName:"p"},'"{{ .inputs.repoUrl }}"'),"."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'grains:\n  validate:\n    kind: shell\n    spec:\n      agent:\n        name: \'{{ .inputs.agent }}\'\n      activities:\n        deploy:\n          commands:\n            - "apt-get -y install git unzip curl"\n            - "git clone {{ .inputs.repoUrl }}"\n')),(0,i.kt)("h3",{id:"outputs"},"outputs"),(0,i.kt)("p",null,"The shell grain output can be captured during the shell execution by exporting named env_var and than be used as the blueprint output or as input for another grain. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"outputs:\n  output_script:\n    value: '{{ .grains.run_shell_grain.activities.deploy.commands.my_script.outputs.output_script }}'\n\ngrains:\n  run_shell_grain:\n    kind: shell\n    spec:\n      agent:\n        name: '{{ .inputs.agent }}'\n      files:\n        - source: my_scripts_repo\n          path: scripts/script.sh\n          branch: my-branch # optional\n          commit: d39c5737f2fa999c20f12d09c5b46a4f67f47b98 # optional\n      activities:\n        deploy:\n          commands:\n            - name: my_script\n              command:  'source script.sh'\n              outputs:\n                - output_script\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"script.sh")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# run some cmds..\ncmd_output=$(...)\n\n# capture the outputs \nexport output_script=$cmd_output\n")),(0,i.kt)("h3",{id:"commands"},"commands"),(0,i.kt)("p",null,"The commands section allows to execute bash/python3 code or files stored in one of the space's repositories as part of the launch and/or end of the environment. The Shell grain has two command types - ",(0,i.kt)("strong",{parentName:"p"},"deploy")," for running code at the launch of the environment, and ",(0,i.kt)("strong",{parentName:"p"},"destroy")," for running code as part of the environment\u2019s teardown. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'grains:\n  validate:\n    kind: shell\n    spec:\n      agent:\n        name: kubernetes-testing1\n      activities:\n        deploy:\n          commands:\n            - "apt-get -y install git unzip curl"\n            - "git clone {{ .inputs.repoUrl }}"\n            - "curl https://get.datree.io | /bin/bash"\n            - "datree test {{.inputs.repoName}}/{{.inputs.filePath}}"\n        destroy:\n          commands:\n            - "https://gist.githubusercontent.com/.../check.py"\n            - "python3 check.py"\n')),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u26a0\ufe0f ",(0,i.kt)("strong",{parentName:"p"},"Warning"),"\nEach command new line from the above example is segregated in its own shell, so running these commands:"),(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'     activities:\n       deploy:\n         commands:\n           - "cd /home"\n           - "cat file.txt"\n'))),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Is not as running it like:"),(0,i.kt)("pre",{parentName:"blockquote"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'     activities:\n       deploy:\n         commands:\n           - "cd /home; cat file.txt"\n')),(0,i.kt)("p",{parentName:"blockquote"},"Another option would be to have a script file and call it directly only on one line. ")),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),(0,i.kt)("strong",{parentName:"h5"},"note"))),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"Note"),": only the ",(0,i.kt)("strong",{parentName:"p"},"last command or script")," provided is evaluated for a successful exit code, all previous commands or scripts will still be ran regardless of failures."))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),(0,i.kt)("strong",{parentName:"h5"},"note"))),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can specify the code to be run as free text bash/python3 commands or by referencing a file (any file type can be run, not just bash or python3). "),(0,i.kt)("p",{parentName:"div"},"To run a file, specify the file and its repo in the ",(0,i.kt)("inlineCode",{parentName:"p"},"files")," section and the file name and extension under ",(0,i.kt)("inlineCode",{parentName:"p"},"commands"),'. For example, file "post-install-script.sh":'),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=",title:""},'grains:\n  validate:\n    kind: shell\n    spec:\n      agent:\n        name: ...\n      files:\n        - path: "scripts/post-install-script.sh"\n          source: my-repo\n      activities:\n        deploy:\n          commands:\n            - "apt-get -y install git unzip curl"\n            - "git clone {{ .inputs.repoUrl }}"\n            - "curl https://get.datree.io | /bin/bash"\n            - "./post-install-script.sh"\n            - name: generate_report\n              command: "datree test {{.inputs.repoName}}/{{.inputs.filePath}}"\n')),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",3:!0,className:"language-yaml",metastring:'title="Python 3 example:"',title:'"Python','example:"':!0},'commands\n  - "apt-get -y install wget"\n  - "wget https://.../check.py"\n  - "python3 check.py"\n')),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="Bash example:"',title:'"Bash','example:"':!0},'commands\n  - "apt-get -y install wget"\n  - "wget https://.../simple.sh"\n  - "/bin/bash simple.sh"\n')))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="Using destroy command"',title:'"Using',destroy:!0,'command"':!0},"spec_version: 2\ndescription: Cleanup task example\n\ninputs:\n  agent:\n    type: agent\n\ngrains:\n  create_task:\n    kind: shell\n    spec:\n      agent:\n        name: '{{ .inputs.agent }}'\n      files:\n        - source: blueprints\n          path: blueprints/workflows/scripts/create-something.sh\n      activities:\n        deploy:\n          commands:\n            - name: create-task\n              command:  'source create-something.sh'\n\n  cleanup_task:\n    kind: shell\n    spec:\n      agent:\n        name: '{{ .inputs.agent }}'\n      files:\n        - source: blueprints\n          path: blueprints/workflows/scripts/clean-something.sh\n      activities:\n        # required to have a deploy section, even if it does nothing\n        deploy:\n          commands:\n            - \"echo NOTHING-TO-DO\"\n        destroy:\n          commands:\n            - name: cleanup-task\n              command:  'source clean-something.sh'\n")),(0,i.kt)("h4",{id:"using-multiline-shell-commands-in-yaml"},"Using Multiline Shell Commands in YAML"),(0,i.kt)("p",null,"When using multiline shell commands in YAML, you can use the >- syntax to indicate that the content is a folded block scalar. Each line should end with a semicolon (;), double ampersand (&&), or double vertical bar (||) to ensure the commands are executed correctly. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"grains:\n  validate:\n    kind: shell\n    spec:\n      agent:\n        name: kubernetes-testing1\n      activities:\n        deploy:\n          commands:\n            - >- # you can use this syntax in the commands sections\n              apt-get -y install git unzip curl &&\n              git clone {{ .inputs.repoUrl }} &&\n              curl https://get.datree.io | /bin/bash &&\n              datree test {{.inputs.repoName}}/{{.inputs.filePath}}\n        destroy:\n          commands:\n            - name: my_script\n              command: >- # or like so in the command section\n                curl https://get.datree.io | /bin/bash ;\n                source script.sh {{ .inputs.script_input1 }}\n")))}m.isMDXComponent=!0}}]);