"use strict";(self.webpackChunktorque=self.webpackChunktorque||[]).push([[2577],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),l=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(p.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,s=e.originalType,p=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=l(t),m=i,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||s;return t?a.createElement(h,o(o({ref:n},c),{},{components:t})):a.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var s=t.length,o=new Array(s);o[0]=m;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r[d]="string"==typeof e?e:i,o[1]=r;for(var l=2;l<s;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1465:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var a=t(7462),i=(t(7294),t(3905));const s={bar_position:12,title:"The Shell Grain"},o=void 0,r={unversionedId:"blueprint-designer-guide/blueprints/shell-grain",id:"blueprint-designer-guide/blueprints/shell-grain",title:"The Shell Grain",description:"The Shell grain is an asset-agnostic grain that allows you to run bash/python3 commands as part of your environment's launch and/or teardown.The commands section allows to execute bash/python3 code or files stored in one of the space's repositories as part of the launch and/or end of the environment. The Shell grain has two command types - deploy for running code at the launch of the environment, and destroy for running code as part of the environment's teardown.It's useful if you need to prepare or clean up your environment's cloud infrastructure as part of the deployment. For example, you could use this grain to run \"datree\" validations on a Kubernetes grain's asset, or perhaps back up/clone a DB before environment deployment.",source:"@site/docs/blueprint-designer-guide/blueprints/shell-grain.md",sourceDirName:"blueprint-designer-guide/blueprints",slug:"/blueprint-designer-guide/blueprints/shell-grain",permalink:"/blueprint-designer-guide/blueprints/shell-grain",editUrl:"https://github.com/QualiTorque/torque-docs/tree/master/docs/blueprint-designer-guide/blueprints/shell-grain.md",tags:[],version:"current",frontMatter:{bar_position:12,title:"The Shell Grain"},sidebar:"torqueSidebar",previous:{title:"Custom Grain",permalink:"/blueprint-designer-guide/blueprints/custom-grain"},next:{title:"The layout yaml",permalink:"/blueprint-designer-guide/layouts/"}},p={},l=[{value:"Tools and Technologies",id:"tools-and-technologies",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Simple",id:"simple",level:3},{value:"Inputs and outputs",id:"inputs-and-outputs",level:3},{value:"Grain Spec Reference",id:"grain-spec-reference",level:2},{value:"<code>agent</code>",id:"agent",level:3},{value:"<code>inputs</code>",id:"inputs",level:3},{value:"<code>outputs</code>",id:"outputs",level:3},{value:"<code>activities</code>",id:"activities",level:3},{value:"<code>deploy</code>",id:"deploy",level:4},{value:"<code>destroy</code>",id:"destroy",level:4},{value:"<code>files</code>",id:"files",level:3},{value:"File Properties",id:"file-properties",level:4},{value:"<code>commands</code>",id:"commands",level:3},{value:"Using Multiline Shell Commands in YAML",id:"using-multiline-shell-commands-in-yaml",level:4}],c={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The Shell grain is an asset-agnostic grain that allows you to run bash/python3 commands as part of your environment's launch and/or teardown.The commands section allows to execute bash/python3 code or files stored in one of the space's repositories as part of the launch and/or end of the environment. The Shell grain has two command types - ",(0,i.kt)("inlineCode",{parentName:"p"},"deploy")," for running code at the launch of the environment, and ",(0,i.kt)("inlineCode",{parentName:"p"},"destroy")," for running code as part of the environment's teardown.It's useful if you need to prepare or clean up your environment's cloud infrastructure as part of the deployment. For example, you could use this grain to run \"datree\" validations on a Kubernetes grain's asset, or perhaps back up/clone a DB before environment deployment."),(0,i.kt)("h2",{id:"tools-and-technologies"},"Tools and Technologies"),(0,i.kt)("p",null,"The following tools and technologies are installed out of the box on our agents in the Kubernetes pods and can be used when writing grain scripts:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"dotnet"),(0,i.kt)("li",{parentName:"ul"},"python3"),(0,i.kt)("li",{parentName:"ul"},"pip"),(0,i.kt)("li",{parentName:"ul"},"curl"),(0,i.kt)("li",{parentName:"ul"},"wget"),(0,i.kt)("li",{parentName:"ul"},"jq"),(0,i.kt)("li",{parentName:"ul"},"git"),(0,i.kt)("li",{parentName:"ul"},"zip"),(0,i.kt)("li",{parentName:"ul"},"unzip"),(0,i.kt)("li",{parentName:"ul"},"kubectl"),(0,i.kt)("li",{parentName:"ul"},"awscli")),(0,i.kt)("p",null,'The Shell grain is an asset-agnostic grain that allows you to run bash/python3 commands as part of your environment\u2019s launch and/or teardown. It\u2019s useful if you need to prepare or clean up your environment\u2019s cloud infrastructure as part of the deployment. For example, you could use this grain to run "datree" validations on a Kubernetes grain\u2019s asset, or perhaps back up/clone a DB before environment deployment.'),(0,i.kt)("h2",{id:"usage-examples"},"Usage Examples"),(0,i.kt)("h3",{id:"simple"},"Simple"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"spec_version: 2\ndescription: Run a simple shell grain\n\ngrains:\n  validate:\n    kind: shell\n    spec:\n      agent:\n        name: '{{ .inputs.agent }}'\n      activities:\n        deploy:\n          commands:\n            - 'echo \"Hello World\"'\n")),(0,i.kt)("h3",{id:"inputs-and-outputs"},"Inputs and outputs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"spec_version: 2\ndescription: Run a simple shell grain with inputs and outputs\n\ninputs:\n  script_input1:\n    type: string\n    default: 'input1'\n  agent:\n    type: agent\n\noutputs:\n  output_script_1:\n    value: '{{ .grains.run_shell_grain.activities.deploy.commands.my_script.outputs.output_script_1 }}'\n  output_script_2:\n    value: '{{ .grains.run_shell_grain.activities.deploy.commands.my_script.outputs.output_script_2 }}'  \n\ngrains:\n  run_shell_grain:\n    kind: shell\n    spec:\n      agent:\n        name: '{{ .inputs.agent }}'\n      files:\n        - source: my_scripts_repo\n          path: scripts/script.sh\n      activities:\n        deploy:\n          commands:\n            - name: my_script\n              command:  'source script.sh {{ .inputs.script_input1 }}'\n              outputs:\n                - output_script_1\n                - output_script_2\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Script example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'input_1=$1\necho "input_1=$input_1"\n\n# run some cmds..\ncmd1_output=$(jq --arg ResourceId "..." \'.resources[] | .attributes | .instance_state\' $input_1)\ncmd2_output=$(jq --arg ResourceId "..." \'.resources[] | .attributes | .instance_state\' $input_1)\n\n# capture the outputs \nexport output_script_1=$cmd1_output\nexport output_script_2=$cmd2_output\n')),(0,i.kt)("h2",{id:"grain-spec-reference"},"Grain Spec Reference"),(0,i.kt)("h3",{id:"agent"},(0,i.kt)("inlineCode",{parentName:"h3"},"agent")),(0,i.kt)("p",null,"Please see ",(0,i.kt)("a",{parentName:"p",href:"/blueprint-designer-guide/blueprints/blueprints-yaml-structure#agent"},"the grain agent")," for more details."),(0,i.kt)("h3",{id:"inputs"},(0,i.kt)("inlineCode",{parentName:"h3"},"inputs")),(0,i.kt)("p",null,"Inputs provided to the shell grain are used when launching the shell commands. "),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Unlike other grains, in the shell grain, inputs are used inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"commands")," section, wrapped in double curly brackets - ",(0,i.kt)("inlineCode",{parentName:"p"},'"{{ .inputs.repoUrl }}"'),"."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'spec_version: 2\ndescription: Clone a git repo using shell grain\n\ninputs:\n  repoUrl:\n    type: string\n    default: "https://github.com/my-org/my-repo.git"\n\ngrains:\n  validate:\n    kind: shell\n    spec:\n      agent:\n        name: \'{{ .inputs.agent }}\'\n      activities:\n        deploy:\n          commands:\n            - "apt-get -y install git unzip curl"\n            - "git clone {{ .inputs.repoUrl }}"\n')),(0,i.kt)("h3",{id:"outputs"},(0,i.kt)("inlineCode",{parentName:"h3"},"outputs")),(0,i.kt)("p",null,"The shell grain output can be captured during the shell execution by exporting named environment variables and then be used as the blueprint output or as input for another grain. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"outputs:\n  output_script:\n    value: '{{ .grains.run_shell_grain.activities.deploy.commands.my_script.outputs.output_script }}'\n\ngrains:\n  run_shell_grain:\n    kind: shell\n    spec:\n      agent:\n        name: '{{ .inputs.agent }}'\n      files:\n        - source: my_scripts_repo\n          path: scripts/script.sh\n          branch: my-branch # optional\n          commit: d39c5737f2fa999c20f12d09c5b46a4f67f47b98 # optional\n      activities:\n        deploy:\n          commands:\n            - name: my_script\n              command:  'source script.sh'\n              outputs:\n                - output_script\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Script example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"# run some cmds..\ncmd_output=$(...)\n\n# capture the outputs \nexport output_script=$cmd_output\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Advanced Example: File-based Output Extraction")),(0,i.kt)("p",null,"This example demonstrates a standardized approach for capturing outputs from external scripts (similar to Terraform's approach). The Python script writes outputs to a file, which is then parsed and exported as environment variables."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"spec_version: 2\ndescription: Extract outputs from a Python script using file-based approach\n\ninputs:\n  selection:\n    type: string\n    default: 'production'\n\noutputs:\n  database_endpoint:\n    value: '{{ .grains.shell_processor.activities.deploy.commands.extract_outputs.outputs.database_endpoint }}'\n  api_key:\n    value: '{{ .grains.shell_processor.activities.deploy.commands.extract_outputs.outputs.api_key }}'\n  cluster_id:\n    value: '{{ .grains.shell_processor.activities.deploy.commands.extract_outputs.outputs.cluster_id }}'\n\ngrains:\n  shell_processor:\n    kind: shell\n    spec:\n      agent:\n        name: '{{ .inputs.agent }}'\n      files:\n        - source: assets\n          path: scripts/generate_outputs.py\n      activities:\n        deploy:\n          commands:\n            - name: generate_outputs_file\n              command: 'python3 generate_outputs.py {{ .inputs.selection }}'\n            - name: extract_outputs\n              command: |\n                while IFS='=' read -r key value; do\n                  if [[ -n \"$key\" && -n \"$value\" ]]; then\n                    export $key=$value\n                    echo \"Exported $key=$value\"\n                  fi\n                done < ~/outputs.txt\n              outputs:\n                - database_endpoint\n                - api_key\n                - cluster_id\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Python script example (generate_outputs.py):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import sys\nimport os\n\ndef generate_outputs(environment):\n    # Simulate some processing based on input\n    outputs = {\n        'database_endpoint': f'db-{environment}.example.com:5432',\n        'api_key': f'api-key-{environment}-12345',\n        'cluster_id': f'cluster-{environment}-xyz789'\n    }\n    \n    # Write outputs to a file in key=value format\n    output_file = os.path.expanduser('~/outputs.txt')\n    with open(output_file, 'w') as f:\n        for key, value in outputs.items():\n            f.write(f'{key}={value}\\n')\n    \n    print(f\"Generated outputs for environment: {environment}\")\n\nif __name__ == \"__main__\":\n    environment = sys.argv[1] if len(sys.argv) > 1 else 'default'\n    generate_outputs(environment)\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This file-based approach provides a standardized way to extract outputs from any script language (Python, Node.js, Go, etc.) by having the script write outputs in ",(0,i.kt)("inlineCode",{parentName:"p"},"key=value")," format to a file, which is then parsed and exported as shell environment variables."))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Output file format (~/outputs.txt):")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"database_endpoint=db-production.example.com:5432\napi_key=api-key-production-12345\ncluster_id=cluster-production-xyz789\n")),(0,i.kt)("h3",{id:"activities"},(0,i.kt)("inlineCode",{parentName:"h3"},"activities")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"activities")," section defines the lifecycle hooks for the shell grain. It contains the actual commands to be executed during different phases of the environment lifecycle."),(0,i.kt)("h4",{id:"deploy"},(0,i.kt)("inlineCode",{parentName:"h4"},"deploy")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"deploy")," activity contains commands that are executed during the environment launch phase. This is where you place initialization scripts, setup commands, or any operations needed to prepare your environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'grains:\n  my_shell_grain:\n    kind: shell\n    spec:\n      agent:\n        name: \'{{ .inputs.agent }}\'\n      activities:\n        deploy:\n          commands:\n            - "apt-get -y install git curl"\n            - "git clone {{ .inputs.repoUrl }}"\n            - "curl https://get.datree.io | /bin/bash"\n            - name: validation_script\n              command: "datree test {{.inputs.repoName}}/{{.inputs.filePath}}"\n              outputs:\n                - validation_result\n')),(0,i.kt)("h4",{id:"destroy"},(0,i.kt)("inlineCode",{parentName:"h4"},"destroy")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"destroy")," activity contains commands that are executed during the environment teardown phase. This is where you place cleanup scripts, backup operations, or any operations needed to properly clean up your environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'grains:\n  my_shell_grain:\n    kind: shell\n    spec:\n      agent:\n        name: \'{{ .inputs.agent }}\'\n      activities:\n        deploy:\n          commands:\n            - "echo \'Environment setup complete\'"\n        destroy:\n          commands:\n            - "echo \'Starting cleanup process\'"\n            - name: backup_logs\n              command: "tar -czf logs-backup.tar.gz /var/log/app"\n            - "rm -rf /tmp/temp-files"\n            - "echo \'Cleanup complete\'"\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("inlineCode",{parentName:"p"},"deploy")," activity is mandatory for all shell grains, even if you only want to run commands during the ",(0,i.kt)("inlineCode",{parentName:"p"},"destroy")," phase. In such cases, you can add a simple placeholder command like ",(0,i.kt)("inlineCode",{parentName:"p"},'echo "NOTHING-TO-DO"')," in the deploy section."))),(0,i.kt)("h3",{id:"files"},(0,i.kt)("inlineCode",{parentName:"h3"},"files")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"files")," section allows you to reference external script files stored in your space's repositories. These files can then be executed as part of your shell grain commands. This is useful for organizing complex scripts separately from your blueprint YAML."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'grains:\n  my_shell_grain:\n    kind: shell\n    spec:\n      agent:\n        name: \'{{ .inputs.agent }}\'\n      files:\n        - source: my_scripts_repo\n          path: scripts/setup.sh\n        - source: my_scripts_repo\n          path: scripts/validation.py\n          branch: develop # optional - specify a specific branch\n          commit: d39c5737f2fa999c20f12d09c5b46a4f67f47b98 # optional - specify a specific commit\n      activities:\n        deploy:\n          commands:\n            - "chmod +x setup.sh"\n            - "./setup.sh"\n            - "python3 validation.py"\n')),(0,i.kt)("h4",{id:"file-properties"},"File Properties"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"source"))," (required): The name of the repository in your space that contains the file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"path"))," (required): The relative path to the file within the repository"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"branch"))," (optional): Specific branch to use. If not specified, uses the default branch"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"commit"))," (optional): Specific commit hash to use. Takes precedence over branch if both are specified")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Files referenced in the ",(0,i.kt)("inlineCode",{parentName:"p"},"files")," section are downloaded to the working directory of the shell grain and can be executed directly by name in the ",(0,i.kt)("inlineCode",{parentName:"p"},"commands")," section."))),(0,i.kt)("h3",{id:"commands"},(0,i.kt)("inlineCode",{parentName:"h3"},"commands")),(0,i.kt)("p",null,"The commands section allows to execute bash/python3 code or files stored in one of the space's repositories as part of the launch and/or end of the environment. The Shell grain has two command types - ",(0,i.kt)("strong",{parentName:"p"},"deploy")," for running code at the launch of the environment, and ",(0,i.kt)("strong",{parentName:"p"},"destroy")," for running code as part of the environment\u2019s teardown. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'grains:\n  validate:\n    kind: shell\n    spec:\n      agent:\n        name: kubernetes-testing1\n      activities:\n        deploy:\n          commands:\n            - "apt-get -y install git unzip curl"\n            - "git clone {{ .inputs.repoUrl }}"\n            - "curl https://get.datree.io | /bin/bash"\n            - "datree test {{.inputs.repoName}}/{{.inputs.filePath}}"\n        destroy:\n          commands:\n            - "https://gist.githubusercontent.com/.../check.py"\n            - "python3 check.py"\n')),(0,i.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Each command new line from the above example is segregated in its own shell, so running these commands:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'activities:\n  deploy:\n    commands:\n      - "cd /home"\n      - "cat file.txt"\n')),(0,i.kt)("p",{parentName:"div"},"Is not as running it like:"),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'activities:\n  deploy:\n    commands:\n      - "cd /home; cat file.txt"\n')),(0,i.kt)("p",{parentName:"div"},"Another option would be to have a script file and call it directly only on one line."))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only the ",(0,i.kt)("strong",{parentName:"p"},"last command or script")," provided is evaluated for a successful exit code, all previous commands or scripts will still be ran regardless of failures."))),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can specify the code to be run as free text bash/python3 commands or by referencing a file (any file type can be run, not just bash or python3)."),(0,i.kt)("p",{parentName:"div"},"To run a file, specify the file and its repo in the ",(0,i.kt)("inlineCode",{parentName:"p"},"files")," section and the file name and extension under ",(0,i.kt)("inlineCode",{parentName:"p"},"commands"),'. For example, file "post-install-script.sh":'),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=",title:""},'grains:\n  validate:\n    kind: shell\n    spec:\n      agent:\n        name: ...\n      files:\n        - path: "scripts/post-install-script.sh"\n          source: my-repo\n      activities:\n        deploy:\n          commands:\n            - "apt-get -y install git unzip curl"\n            - "git clone {{ .inputs.repoUrl }}"\n            - "curl https://get.datree.io | /bin/bash"\n            - "./post-install-script.sh"\n            - name: generate_report\n              command: "datree test {{.inputs.repoName}}/{{.inputs.filePath}}"\n')),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"Python example:")),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'commands:\n  - "apt-get -y install wget"\n  - "wget https://.../check.py"\n  - "python3 check.py"\n')),(0,i.kt)("p",{parentName:"div"},(0,i.kt)("strong",{parentName:"p"},"Bash example:")),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'commands:\n  - "apt-get -y install wget"\n  - "wget https://.../simple.sh"\n  - "/bin/bash simple.sh"\n')))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Using destroy command example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"spec_version: 2\ndescription: Cleanup task example\n\ninputs:\n  agent:\n    type: agent\n\ngrains:\n  create_task:\n    kind: shell\n    spec:\n      agent:\n        name: '{{ .inputs.agent }}'\n      files:\n        - source: blueprints\n          path: blueprints/workflows/scripts/create-something.sh\n      activities:\n        deploy:\n          commands:\n            - name: create-task\n              command:  'source create-something.sh'\n\n  cleanup_task:\n    kind: shell\n    spec:\n      agent:\n        name: '{{ .inputs.agent }}'\n      files:\n        - source: blueprints\n          path: blueprints/workflows/scripts/clean-something.sh\n      activities:\n        # required to have a deploy section, even if it does nothing\n        deploy:\n          commands:\n            - \"echo NOTHING-TO-DO\"\n        destroy:\n          commands:\n            - name: cleanup-task\n              command:  'source clean-something.sh'\n")),(0,i.kt)("h4",{id:"using-multiline-shell-commands-in-yaml"},"Using Multiline Shell Commands in YAML"),(0,i.kt)("p",null,"When using multiline shell commands in YAML, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},">-")," syntax to indicate that the content is a folded block scalar. Each line should end with a semicolon (",(0,i.kt)("inlineCode",{parentName:"p"},";"),"), double ampersand (",(0,i.kt)("inlineCode",{parentName:"p"},"&&"),"), or double vertical bar (",(0,i.kt)("inlineCode",{parentName:"p"},"||"),") to ensure the commands are executed correctly. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"grains:\n  validate:\n    kind: shell\n    spec:\n      agent:\n        name: kubernetes-testing1\n      activities:\n        deploy:\n          commands:\n            - >- # you can use this syntax in the commands sections\n              apt-get -y install git unzip curl &&\n              git clone {{ .inputs.repoUrl }} &&\n              curl https://get.datree.io | /bin/bash &&\n              datree test {{.inputs.repoName}}/{{.inputs.filePath}}\n        destroy:\n          commands:\n            - name: my_script\n              command: >- # or like so in the command section\n                curl https://get.datree.io | /bin/bash ;\n                source script.sh {{ .inputs.script_input1 }}\n")))}u.isMDXComponent=!0}}]);