"use strict";(self.webpackChunktorque=self.webpackChunktorque||[]).push([[3467],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>v});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(t),d=i,v=c["".concat(s,".").concat(d)]||c[d]||u[d]||o;return t?a.createElement(v,r(r({ref:n},m),{},{components:t})):a.createElement(v,r({ref:n},m))}));function v(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2157:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),i=(t(7294),t(3905));const o={sidebar_position:1,title:"The Environment YAML"},r=void 0,l={unversionedId:"environment-as-code/environment-as-code-yaml",id:"environment-as-code/environment-as-code-yaml",title:"The Environment YAML",description:"Environment as Code (EaC) allows you to define and manage Torque environments using YAML files. If you know how to write Torque blueprints, you can write EaC YAML files. The structure of an EaC YAML file is similar to a blueprint, with the addition of an 'environment' section that defines the properties of the specific environment instance.",source:"@site/docs/environment-as-code/environment-as-code-yaml.md",sourceDirName:"environment-as-code",slug:"/environment-as-code/environment-as-code-yaml",permalink:"/environment-as-code/environment-as-code-yaml",editUrl:"https://github.com/QualiTorque/torque-docs/tree/master/docs/environment-as-code/environment-as-code-yaml.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"The Environment YAML"},sidebar:"torqueSidebar",previous:{title:"Overview",permalink:"/environment-as-code/environment-as-code-overview"},next:{title:"Torque Workflows",permalink:"/workflows/workflows-overview"}},s={},p=[{value:"Environment Discovery",id:"environment-discovery",level:2},{value:"Usage Example",id:"usage-example",level:2},{value:"Environment section",id:"environment-section",level:2},{value:"Environment Spec Reference",id:"environment-spec-reference",level:2},{value:"<code>environment_name</code>",id:"environment_name",level:3},{value:"<code>description</code>",id:"description",level:3},{value:"<code>owner_email</code>",id:"owner_email",level:3},{value:"<code>state</code>",id:"state",level:3},{value:"<code>collaborators</code>",id:"collaborators",level:3},{value:"<code>spaces</code>",id:"spaces",level:3},{value:"<code>tags</code>",id:"tags",level:3},{value:"<code>labels</code>",id:"labels",level:3},{value:"<code>duration</code>",id:"duration",level:3},{value:"<code>auto_approve</code>",id:"auto_approve",level:3},{value:"<code>blueprint_commit</code>",id:"blueprint_commit",level:3}],m={toc:p},c="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Environment as Code (EaC) allows you to define and manage Torque environments using YAML files. If you know how to write Torque blueprints, you can write EaC YAML files. The structure of an EaC YAML file is similar to a blueprint, with the addition of an 'environment' section that defines the properties of the specific environment instance."),(0,i.kt)("h2",{id:"environment-discovery"},"Environment Discovery"),(0,i.kt)("p",null,"Environment YAML files must be placed under the 'environments' directory in the repository. Torque periodically scans this directory for environment YAML files and stores them internally."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Environments are written in YAML files that reside in an ",(0,i.kt)("strong",{parentName:"p"},"/environments"),' folder within a source control repository onboarded to Torque (the folder name is case-sensitive and must be "environments"). Environments kept in the ',(0,i.kt)("strong",{parentName:"p"},"/environments"),' folder must be of type ".yaml" and not ".yml" to be used in Torque.'))),(0,i.kt)("p",null,"The directory structure should be as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"environments/\n    production.yaml\n    staging.yaml\n    devbox.yaml\n")),(0,i.kt)("p",null,"When a new environment YAML file is detected or an existing one is modified, Torque performs validations on the file. If the file is valid, a snapshot is saved, which will be used to create or reconcile the environment. If the file is invalid, it will not affect the existing snapshot or the environment."),(0,i.kt)("p",null,"If a user modifies the environment YAML file, the changes will be applied to the corresponding environment."),(0,i.kt)("p",null,"Possible applicable changes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Add/remove grains"),(0,i.kt)("li",{parentName:"ul"},"Change commit/tag"),(0,i.kt)("li",{parentName:"ul"},"Environment inputs"),(0,i.kt)("li",{parentName:"ul"},"Grain inputs")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All sources must contain a commit hash or tag."))),(0,i.kt)("h2",{id:"usage-example"},"Usage Example"),(0,i.kt)("p",null,"Here's an example of a Torque environment YAML file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"spec_version: 2\n\nenvironment:\n  environment_name: eac-env-name\n  owner_email: me@quali.com\n  state: active\n  labels:\n    label-key: label-value\n    label-key2: # for \"value only\" labels\n     \ninputs:\n  agent:\n    type: agent\n    default: production-k8s\n\n  tf_input:\n    type: string\n    default: default_input\n    \noutputs:\n  tf_output: \n    value: '{{ .grains.tf1.outputs.output2 }}'\n    quick: true\n    \ngrains:\n  tf1:\n    kind: terraform\n    tf-version: 1.5.5\n    spec:\n      source:\n        store: iac-repo\n        path: terraform/complex-references1\n        tag: v1.0.1 \n      agent:\n        name: '{{ .inputs.agent }}'\n      inputs:\n        - test_input1: '{{ .inputs.tf_input }}'\n        - test_input2: \"input2\"\n      outputs:\n        - output2\n\n  tf2:\n    kind: terraform\n    tf-version: 1.5.5\n    spec:\n      source:\n        store: iac-repo\n        path: terraform/complex-references2\n        tag: v1.0.2\n      agent:\n        name: '{{ .inputs.agent }}'\n      inputs:\n        - test_input1: '{{.inputs.tf_input}}'\n        - test_input2: \"input2\"\n      outputs:\n        - output2\n      scripts: \n        pre-tf-init:\n          source:\n            store: scripts-repo\n            path : scripts/user_script.sh\n          arguments: \"value\"\n        pre-tf-destroy:\n          source:\n            store: scripts-repo\n            path : scripts/user_script.sh\n          arguments: \"value\"\n  \n  bp1:\n    kind: blueprint\n    spec:\n      source:\n        store: iac-repo\n        path: blueprints/building-block.yaml\n        tag: official-1.0.1\n      inputs:\n        - agent: '{{ .inputs.agent }}'\n")),(0,i.kt)("p",null,"In this example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"environment")," section defines the environment name, description, owner email, and state. The ",(0,i.kt)("inlineCode",{parentName:"p"},"inputs")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"outputs")," sections define the environment-level inputs and outputs, respectively."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"grains")," section contains the list of grains that make up the environment, similar to a blueprint. Each grain specifies its kind (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"terraform"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"blueprint"),", etc.), version, and other configuration details specific to that grain type."),(0,i.kt)("p",null,"By following this structure, users can define and manage their environments as code, allowing for version control, collaboration, and automated deployments using Torque's Environment as Code (EaC) functionality."),(0,i.kt)("h2",{id:"environment-section"},"Environment section"),(0,i.kt)("p",null,"The environment section contains all of the specific data related to the environment instance. This is the main configuration block that defines how the environment should be created and managed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"environment:\n  environment_name: eac-env\n  description: eac example\n  owner_email: me@quali.com\n  state: active # desired state: active/inactive\n  collaborators: \n    collaborators_emails:\n      - collaborator1@quali.com\n      - collaborator2@quali.com\n    collaborators_groups:\n      - Group1\n      - Group2\n  spaces:\n    - spaceA\n    - spaceB\n  tags:\n    key1: value1\n    key2: value2\n")),(0,i.kt)("h2",{id:"environment-spec-reference"},"Environment Spec Reference"),(0,i.kt)("h3",{id:"environment_name"},(0,i.kt)("inlineCode",{parentName:"h3"},"environment_name")),(0,i.kt)("p",null,"The unique name identifier for the environment. This field is required and must be unique within the space."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"environment:\n  environment_name: my-production-env\n")),(0,i.kt)("h3",{id:"description"},(0,i.kt)("inlineCode",{parentName:"h3"},"description")),(0,i.kt)("p",null,"An optional description providing additional context about the environment's purpose or contents."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'environment:\n  description: "Production environment for web application"\n')),(0,i.kt)("h3",{id:"owner_email"},(0,i.kt)("inlineCode",{parentName:"h3"},"owner_email")),(0,i.kt)("p",null,"The email address of the environment owner. This field is required and must be a valid email address of a user in the Torque system."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"environment:\n  owner_email: admin@company.com\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Updating the owner email does not update the owner of active environments. Owner changes only apply to new environment deployments."))),(0,i.kt)("h3",{id:"state"},(0,i.kt)("inlineCode",{parentName:"h3"},"state")),(0,i.kt)("p",null,"The desired state of the environment. Possible values are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"active"),": The environment should be running and available"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"inactive"),": The environment should be stopped/terminated")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"environment:\n  state: active\n")),(0,i.kt)("h3",{id:"collaborators"},(0,i.kt)("inlineCode",{parentName:"h3"},"collaborators")),(0,i.kt)("p",null,"Defines users and groups that have collaborative access to the environment. Collaborators can view and potentially modify the environment based on their permissions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"environment:\n  collaborators: \n    collaborators_emails:\n      - user1@company.com\n      - user2@company.com\n    collaborators_groups:\n      - Developers\n      - QA-Team\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Sub-fields:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"collaborators_emails"),": List of email addresses for individual users"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"collaborators_groups"),": List of group names that should have collaborative access")),(0,i.kt)("h3",{id:"spaces"},(0,i.kt)("inlineCode",{parentName:"h3"},"spaces")),(0,i.kt)("p",null,"Specifies which Torque spaces this environment belongs to. Environments can be associated with multiple spaces for organization and access control purposes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"environment:\n  spaces:\n    - development\n    - testing\n    - staging\n")),(0,i.kt)("h3",{id:"tags"},(0,i.kt)("inlineCode",{parentName:"h3"},"tags")),(0,i.kt)("p",null,"Key-value pairs for categorizing and organizing environments. Tags can be used for filtering, reporting, and applying policies."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"environment:\n  tags:\n    project: web-app\n    team: backend\n    cost-center: engineering\n    environment-type: production\n")),(0,i.kt)("h3",{id:"labels"},(0,i.kt)("inlineCode",{parentName:"h3"},"labels")),(0,i.kt)("p",null,"Similar to tags but used specifically for workflow attachment and selection. Labels help determine which workflows are available for this environment."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"environment:\n  labels:\n    application: web-service\n    tier: production\n    region: us-east-1\n")),(0,i.kt)("h3",{id:"duration"},(0,i.kt)("inlineCode",{parentName:"h3"},"duration")),(0,i.kt)("p",null,"Specifies the maximum lifetime of the environment. The environment will be automatically terminated after this duration expires."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"environment:\n  duration: PT4H  # ISO 8601 duration format (4 hours)\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Supported formats:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ISO 8601 duration format (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"PT1H30M")," for 1 hour 30 minutes)"),(0,i.kt)("li",{parentName:"ul"},"Hours format (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"4h")," for 4 hours)"),(0,i.kt)("li",{parentName:"ul"},"Minutes format (e.g., ",(0,i.kt)("inlineCode",{parentName:"li"},"120m")," for 120 minutes)")),(0,i.kt)("h3",{id:"auto_approve"},(0,i.kt)("inlineCode",{parentName:"h3"},"auto_approve")),(0,i.kt)("p",null,"Controls whether the environment deployment should proceed automatically without requiring manual approval, even if approval policies are configured."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"environment:\n  auto_approve: true  # Default: false\n")),(0,i.kt)("h3",{id:"blueprint_commit"},(0,i.kt)("inlineCode",{parentName:"h3"},"blueprint_commit")),(0,i.kt)("p",null,"Specifies a specific commit hash or tag for the blueprint source, allowing for precise version control of the environment definition."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'environment:\n  blueprint_commit: "abc123def456"  # Commit hash\n  # OR\n  blueprint_commit: "v2.1.0"       # Tag\n')))}u.isMDXComponent=!0}}]);