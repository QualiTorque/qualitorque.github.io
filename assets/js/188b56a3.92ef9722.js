"use strict";(self.webpackChunktorque=self.webpackChunktorque||[]).push([[2577],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=a,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||i;return t?r.createElement(h,o(o({ref:n},u),{},{components:t})):r.createElement(h,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1465:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],s={sidebar_position:21,title:"The Shell Grain"},l=void 0,p={unversionedId:"blueprint-designer-guide/blueprints/shell-grain",id:"blueprint-designer-guide/blueprints/shell-grain",title:"The Shell Grain",description:'The Shell grain is an asset-agnostic grain that allows you to run bash/python3 commands as part of your environment\u2019s launch and/or teardown. It\u2019s useful if you need to prepare or clean up your environment\u2019s cloud infrastructure as part of the deployment. For example, you could use this grain to run "datree" validations on a Kubernetes grain\u2019s asset, or perhaps back up/clone a DB before environment deployment.',source:"@site/docs/blueprint-designer-guide/blueprints/shell-grain.md",sourceDirName:"blueprint-designer-guide/blueprints",slug:"/blueprint-designer-guide/blueprints/shell-grain",permalink:"/blueprint-designer-guide/blueprints/shell-grain",editUrl:"https://github.com/QualiTorque/torque-docs/tree/master/docs/blueprint-designer-guide/blueprints/shell-grain.md",tags:[],version:"current",sidebarPosition:21,frontMatter:{sidebar_position:21,title:"The Shell Grain"},sidebar:"torqueSidebar",previous:{title:"The Kubernetes Grain\u200b",permalink:"/blueprint-designer-guide/blueprints/kubernetes-grain"},next:{title:"The Ansible Grain",permalink:"/blueprint-designer-guide/blueprints/ansible-grain"}},u={},c=[{value:"agent",id:"agent",level:3},{value:"Tools and technologies",id:"tools-and-technologies",level:3},{value:"inputs",id:"inputs",level:3},{value:"Outputs",id:"outputs",level:3},{value:"commands",id:"commands",level:3}],d={toc:c};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'The Shell grain is an asset-agnostic grain that allows you to run bash/python3 commands as part of your environment\u2019s launch and/or teardown. It\u2019s useful if you need to prepare or clean up your environment\u2019s cloud infrastructure as part of the deployment. For example, you could use this grain to run "datree" validations on a Kubernetes grain\u2019s asset, or perhaps back up/clone a DB before environment deployment.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"grains:\n  validate:\n    kind: shell\n    spec:\n      agent:\n        name: \u2026\n      activities:\n        deploy:\n          commands:\n            - \u2026\n        destroy:\n          commands:\n            - \u2026\n")),(0,i.kt)("h3",{id:"agent"},"agent"),(0,i.kt)("p",null,"Please see ",(0,i.kt)("a",{parentName:"p",href:"/blueprint-designer-guide/blueprints/blueprints-yaml-structure#agent"},"the grain agent")," for more details."),(0,i.kt)("h3",{id:"tools-and-technologies"},"Tools and technologies"),(0,i.kt)("p",null,"The following tools and technologies are installed out of the box on our agents in the Kubernetes pods and can be used when writing grain scripts (pre/post, etc.):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"dotnet"),(0,i.kt)("li",{parentName:"ul"},"python3"),(0,i.kt)("li",{parentName:"ul"},"pip3")),(0,i.kt)("h3",{id:"inputs"},"inputs"),(0,i.kt)("p",null,"Similar to blueprint inputs, inputs provided to the Shell grain are used when launching the shell. Unlike other grains, in the Shell grain, inputs are used inside the ",(0,i.kt)("strong",{parentName:"p"},"commands")," section, wrapped in double curly brackets - ",(0,i.kt)("inlineCode",{parentName:"p"},'" {{ .inputs.input1 }}"'),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'grains:\n  validate:\n    kind: shell\n    spec:\n      agent:\n        name: kubernetes-testing1\n      activities:\n        deploy:\n          commands:\n            - "{{ .inputs.repoURL }}"\n            - "git clone {{ .inputs.repoUrl }}"\n')),(0,i.kt)("h3",{id:"outputs"},"Outputs"),(0,i.kt)("p",null,"The Shell grain output can be captured during the shell execution and than be used as a blueprint output or as input for another grain. Note that the Shell grain output is the entire stdout of the grain execution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"outputs:\n  deploy-output:\n    value: '{{.grains.grain1.activities.deploy.commands.bash.output}}'\n\ngrains:\n  grain1:\n    kind: shell\n    spec:\n      files:\n      - path: \"dependencies/script.sh\"\n        source: shell-example\n      agent:\n      # The Torque agent that will be used to provision the environment.\n        name: '{{ .inputs.agent }}'\n      activities:\n        deploy:\n          commands:\n            - name: bash\n              command: \"./script.sh\"\n")),(0,i.kt)("h3",{id:"commands"},"commands"),(0,i.kt)("p",null,"The commands section allows to execute bash/python3 code or files stored in one of the space's repositories as part of the launch and/or end of the environment. The Shell grain has two command types - ",(0,i.kt)("strong",{parentName:"p"},"deploy")," for running code at the launch of the environment, and ",(0,i.kt)("strong",{parentName:"p"},"destroy")," for running code as part of the environment\u2019s teardown. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},'grains:\n  validate:\n    kind: shell\n    spec:\n      agent:\n        name: kubernetes-testing1\n      activities:\n        deploy:\n          commands:\n            - "apt-get -y install git unzip curl"\n            - "git clone {{ .inputs.repoUrl }}"\n            - "curl https://get.datree.io | /bin/bash"\n            - "datree test {{.inputs.repoName}}/{{.inputs.filePath}}"\n        destroy:\n          commands:\n            - "https://gist.githubusercontent.com/.../check.py"\n            - "python3 check.py"\n')),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),(0,i.kt)("strong",{parentName:"h5"},"note"))),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can specify the code to be run as freetext bash/python3 commands or by referencing a file (any file type can be run, not just bash or python3). "),(0,i.kt)("p",{parentName:"div"},"To run a file, specify the file and its repo in the ",(0,i.kt)("inlineCode",{parentName:"p"},"files")," section and the file name and extension under ",(0,i.kt)("inlineCode",{parentName:"p"},"commands"),'. For example, file "post-install-script.sh":'),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"title=",title:""},'grains:\n  validate:\n    kind: shell\n    spec:\n      agent:\n        name: ...\n      files:\n        - path: "scripts/post-install-script.sh"\n          source: my-repo\n      activities:\n        deploy:\n          commands:\n            - "apt-get -y install git unzip curl"\n            - "git clone {{ .inputs.repoUrl }}"\n            - "curl https://get.datree.io | /bin/bash"\n            - "./post-install-script.sh"\n            - name: generate_report\n              command: "datree test {{.inputs.repoName}}/{{.inputs.filePath}}"\n')),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",3:!0,className:"language-jsx",metastring:'title="Python 3 example:"',title:'"Python','example:"':!0},'commands\n  - "apt-get -y install wget"\n  - "wget https://.../check.py"\n  - "python3 check.py"\n')),(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Bash example:"',title:'"Bash','example:"':!0},'commands\n  - "apt-get -y install wget"\n  - "wget https://.../simple.sh"\n  - "/bin/bash simple.sh"\n')))))}m.isMDXComponent=!0}}]);