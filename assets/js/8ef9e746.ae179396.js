"use strict";(self.webpackChunktorque=self.webpackChunktorque||[]).push([[6713],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),p=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(o.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=r,h=m["".concat(o,".").concat(d)]||m[d]||c[d]||i;return t?a.createElement(h,s(s({ref:n},u),{},{components:t})):a.createElement(h,s({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,s=new Array(i);s[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[m]="string"==typeof e?e:r,s[1]=l;for(var p=2;p<i;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9055:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:10,title:"The Helm Grain"},s=void 0,l={unversionedId:"blueprint-designer-guide/blueprints/helm-grain",id:"blueprint-designer-guide/blueprints/helm-grain",title:"The Helm Grain",description:"The Helm grain is Torque's native support for Helm v3 charts. Torque allows designers to use Helm specific features to easily orchestrate self-developer and community charts in a standard way and share them with others as building blocks.",source:"@site/docs/blueprint-designer-guide/blueprints/helm-grain.md",sourceDirName:"blueprint-designer-guide/blueprints",slug:"/blueprint-designer-guide/blueprints/helm-grain",permalink:"/blueprint-designer-guide/blueprints/helm-grain",editUrl:"https://github.com/QualiTorque/torque-docs/tree/master/docs/blueprint-designer-guide/blueprints/helm-grain.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10,title:"The Helm Grain"},sidebar:"torqueSidebar",previous:{title:"The CloudShell Grain",permalink:"/blueprint-designer-guide/blueprints/cloudshell-grain"},next:{title:"The Kubernetes Grain\u200b",permalink:"/blueprint-designer-guide/blueprints/kubernetes-grain"}},o={},p=[{value:"Tools and technologies",id:"tools-and-technologies",level:2},{value:"Usage example",id:"usage-example",level:2},{value:"Grain Spec Reference",id:"grain-spec-reference",level:2},{value:"<code>target-namespace</code>",id:"target-namespace",level:3},{value:"<code>source</code>",id:"source",level:3},{value:"<code>agent</code>",id:"agent",level:3},{value:"Storage Configuration",id:"storage-configuration",level:4},{value:"<code>inputs</code>",id:"inputs",level:3},{value:"<code>values-files</code>",id:"values-files",level:3},{value:"<code>outputs</code>",id:"outputs",level:3},{value:"<code>scripts</code>",id:"scripts",level:3},{value:"Extracting outputs using scripts",id:"extracting-outputs-using-scripts",level:4},{value:"<code>commands</code>",id:"commands",level:3},{value:"<code>command-arguments</code>",id:"command-arguments",level:3},{value:"Use Case: Creating Namespace Automatically",id:"use-case-creating-namespace-automatically",level:4},{value:"Working with Helm Charts Registries",id:"working-with-helm-charts-registries",level:2},{value:"Use-case example",id:"use-case-example",level:3}],u={toc:p},m="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Helm grain is Torque's native support for Helm v3 charts. Torque allows designers to use Helm specific features to easily orchestrate self-developer and community charts in a standard way and share them with others as building blocks."),(0,r.kt)("h2",{id:"tools-and-technologies"},"Tools and technologies"),(0,r.kt)("p",null,"The following tools and technologies are installed out of the box on our agents in the Kubernetes and Helm runners and can be used when writing grain scripts (pre/post, etc.):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"dotnet"),(0,r.kt)("li",{parentName:"ul"},"curl"),(0,r.kt)("li",{parentName:"ul"},"tar"),(0,r.kt)("li",{parentName:"ul"},"unzip"),(0,r.kt)("li",{parentName:"ul"},"kubectl"),(0,r.kt)("li",{parentName:"ul"},"kustomize"),(0,r.kt)("li",{parentName:"ul"},"helm"),(0,r.kt)("li",{parentName:"ul"},"awscli")),(0,r.kt)("h2",{id:"usage-example"},"Usage example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"spec_version: 2\ndescription: Helm deployment with MLflow platform\n\ninputs:\n  target-namespace:\n    type: string\n  admin-password: \n    type: string\n    sensitive: true\n  agent:\n    type: agent\n\noutputs:\n  URL: \n    value: 'http://{{.grains.mlflow.scripts.post-helm-install.outputs.url}}'\n    kind: link\n    quick: true\n\ngrains:\n  mlflow:\n    kind: helm\n    spec:\n      source:\n        store: ml-repo\n        path: helm/mlflow\n      target-namespace: '{{ .inputs.target-namespace }}'\n      agent:\n        name: '{{ .inputs.agent }}'\n      inputs:\n        - nameOverride: '{{ envid | downcase }}'\n        - tracking.auth.password: '{{ .inputs.admin-password }}'\n      scripts:\n        post-helm-install:\n          source:\n            store: ml-repo\n            path: scripts/get-url.sh\n          arguments: '{{ envid | downcase }} {{ .inputs.target-namespace }}'\n          outputs:\n            - url\n      commands:\n        - dep up helm/mlflow\n")),(0,r.kt)("h2",{id:"grain-spec-reference"},"Grain Spec Reference"),(0,r.kt)("h3",{id:"target-namespace"},(0,r.kt)("inlineCode",{parentName:"h3"},"target-namespace")),(0,r.kt)("p",null,"Torque will install the helm release in the namespace referred to in ",(0,r.kt)("inlineCode",{parentName:"p"},"target-namespace"),"."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"The target namespace must exist in the cluster prior to the deployment"),(0,r.kt)("li",{parentName:"ul"},"It must not be equal to the namespaces used by Torque for agent deployments"),(0,r.kt)("li",{parentName:"ul"},"Make sure the service account has enough permissions to create/read/delete everything in the helm chart and also create/read/delete secrets and volumes"),(0,r.kt)("li",{parentName:"ul"},"To automatically create the namespace if it doesn't exist, see ",(0,r.kt)("a",{parentName:"li",href:"#use-case-creating-namespace-automatically"},"Creating Namespace Automatically"))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"helloHelm:\n  kind: helm\n  spec:\n    source:\n      store: my-repo\n      path: folder/my-app\n    target-namespace: '{{ .inputs.namespace }}'\n    agent:\n      name: '{{.inputs.agent}}'\n      service-account: '{{ .inputs.service_account }}'\n")),(0,r.kt)("h3",{id:"source"},(0,r.kt)("inlineCode",{parentName:"h3"},"source")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"source")," section of a Helm grain provides Torque with the information on where the Helm chart is stored and should be retrieved from. This could be either a direct source URL to a Helm chart, or it can be a reference from a Torque-connected git repository."),(0,r.kt)("p",null,"Please see ",(0,r.kt)("a",{parentName:"p",href:"/blueprint-designer-guide/blueprints/blueprints-yaml-structure#source"},"the grain source")," for more details."),(0,r.kt)("h3",{id:"agent"},(0,r.kt)("inlineCode",{parentName:"h3"},"agent")),(0,r.kt)("p",null,"Please see ",(0,r.kt)("a",{parentName:"p",href:"/blueprint-designer-guide/blueprints/blueprints-yaml-structure#agent"},"the grain agent")," for more details."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"It's also possible to use ",(0,r.kt)("inlineCode",{parentName:"p"},"parameters")," for the service-account name. Note that when service account is not provided in the grain, the default service account provided on the agent will be used."),(0,r.kt)("p",{parentName:"div"},(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"    agent:\n      name: '{{.inputs.agent}}'\n      service-account: '{{ .params.service_account }}'\n")))),(0,r.kt)("h4",{id:"storage-configuration"},"Storage Configuration"),(0,r.kt)("p",null,"By default, Helm runners mount storage for code caching optimization. This helps improve performance by caching downloaded charts and dependencies between runs."),(0,r.kt)("p",null,"Setting ",(0,r.kt)("inlineCode",{parentName:"p"},"use-storage: false")," will run the Helm runner container without storage (stateless mode). This is useful for scenarios where persistent storage is not required."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"    agent:\n      name: '{{.inputs.agent}}'\n      use-storage: false\n")),(0,r.kt)("h3",{id:"inputs"},(0,r.kt)("inlineCode",{parentName:"h3"},"inputs")),(0,r.kt)("p",null,"Similar to blueprint inputs and Terraform inputs, the Helm grain ",(0,r.kt)("inlineCode",{parentName:"p"},"inputs")," allow you to reuse the same Helm chart in different ways using different values overrides. Inputs provided to the Helm grain are used when launching the Helm chart. We recommend using Torque's auto-discovery capability to quickly model your Helm chart within Torque including all defined inputs."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"spec_version: 2\n\ninputs:\n  replicaCount:\n    type: string\n    default: '3'\n    allowed-values: ['1', '2', '3']\n  image:\n    type: string\n    default: 'nginx:latest'\n\ngrains:\n  nginx:\n    kind: helm\n    spec:\n      source:\n        store: my-repo \n        path: my-asset     \n      agent:\n        name: my-agent\n      inputs:\n        - replicaCount: '{{ .inputs.replicaCount }}'\n        - service.image: '{{ .inputs.image }}'\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Note that in the above example, blueprint input is used as the value of the Helm grain input, so the environment's owner is able to choose the replicaCount required for his need. The information provided by the user will be passed to Helm chart as values and affect the deployment process."))),(0,r.kt)("h3",{id:"values-files"},(0,r.kt)("inlineCode",{parentName:"h3"},"values-files")),(0,r.kt)("p",null,"In Helm, the ",(0,r.kt)("inlineCode",{parentName:"p"},"values.yaml")," file is a critical component that allows you to configure and customize the behavior of your Kubernetes application deployment."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"values.yaml")," file contains the default configuration values for the templates used in the Helm chart. These values can be overridden at the time of deployment or during an upgrade by providing a different set of values."),(0,r.kt)("p",null,"Torque supports referencing ",(0,r.kt)("inlineCode",{parentName:"p"},"values.yaml")," files as inputs to the Helm grain, with the following syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"grains:\n  nginx:\n    kind: helm\n    spec:\n      source:\n        store: my-repo \n        path: my-asset     \n      agent: \n        name: my-agent\n      inputs:\n        - replicaCount: '{{ .inputs.replicaCount }}'\n        - service.image: '{{ .inputs.image }}'\n      values-files:\n        - source:\n            store: config-repo\n            path: helm/nginx/values.yaml\n        - source:\n            store: another-repo\n            path: overrides/values.yaml\n")),(0,r.kt)("h3",{id:"outputs"},(0,r.kt)("inlineCode",{parentName:"h3"},"outputs")),(0,r.kt)("p",null,"Helm does not natively expose outputs. However, this can be done using a ",(0,r.kt)("inlineCode",{parentName:"p"},"post-helm-install")," script that assigns environment variables after the grain's deployment. The script must be referenced, along with the names of the environment variables in the grain's ",(0,r.kt)("a",{parentName:"p",href:"#scripts"},(0,r.kt)("inlineCode",{parentName:"a"},"scripts")),". To expose the outputs to the environment, the names of the environment variables must be referenced in the blueprint's ",(0,r.kt)("inlineCode",{parentName:"p"},"outputs")," section."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"spec_version: 2\ndescription: Helm blueprint with outputs\n\ninputs:\n  agent:\n    type: agent\n\noutputs:\n  output1:\n    kind: regular\n    value: '{{.grains.my-helm-grain.scripts.post-helm-install.outputs.url}}'\n  output2:\n    kind: regular\n    value: '{{.grains.my-helm-grain.scripts.post-helm-install.outputs.status}}'\n")),(0,r.kt)("h3",{id:"scripts"},(0,r.kt)("inlineCode",{parentName:"h3"},"scripts")),(0,r.kt)("p",null,"Torque provides the ability to execute custom code after Torque executes the Helm chart. This is useful for generating and using outputs, as explained in ",(0,r.kt)("a",{parentName:"p",href:"#outputs"},"helm outputs"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example - grain with a post-install script and outputs:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"grains:\n  nginx:\n    kind: helm\n    spec:\n      source:\n        store: my-repo\n        path: my-asset\n      agent:\n        name: my-agent\n        service-account: my-service-account\n      inputs:\n        - replicaCount: '{{ .inputs.replicaCount }}'\n      commands:\n        - dep up bitnami/nginx\n      scripts:\n        post-helm-install:\n          source:\n            store: my-repo \n            path: scripts/get-outputs.sh\n          arguments: \"{{.inputs.ACCOUNT_ID}},{{.inputs.ID2}},3\"\n          outputs:\n            - test1\n            - test2\n")),(0,r.kt)("h4",{id:"extracting-outputs-using-scripts"},"Extracting outputs using scripts"),(0,r.kt)("p",null,"This Blueprint is designed to deploy the MLflow platform, an open-source platform for managing the end-to-end machine learning lifecycle, using a Helm chart."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"spec_version: 2\ndescription: |\n  MLflow provides an open-source platform to manage the end-to-end machine learning lifecycle.\n\ninputs:\n  target-namespace:\n    type: string\n  admin-password: \n    type: string\n    sensitive: true\n  agent:\n    type: agent\n\noutputs:\n  URL: \n    value: 'http://{{.grains.mlflow.scripts.post-helm-install.outputs.url}}'\n    kind: link\n    quick: true\n\ngrains:\n  mlflow:\n    kind: helm\n    spec:\n      source:\n        store: ml-repo\n        path: helm/mlflow\n      target-namespace: '{{ .inputs.target-namespace }}'\n      agent:\n        name: '{{ .inputs.agent }}'\n      inputs:\n      - nameOverride: '{{ envid | downcase }}'\n      - tracking.auth.password: '{{ .inputs.admin-password }}'\n      scripts:\n        post-helm-install:\n          source:\n            store: ml-repo\n            path:  scripts/get-url.sh\n          arguments: '{{ envid | downcase }} {{ .inputs.target-namespace }}'\n          outputs:\n            - url\n      commands:\n      - dep up helm/mlflow\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"get-url.sh")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"echo \"Getting url service address\"\n\nexport RELEASE_NAME=$1\nexport NAMESPACE=$2\nexport url=$(kubectl get service -n $NAMESPACE | grep $RELEASE_NAME | grep LoadBalancer | awk '{print $1}' | xargs kubectl get service -n $NAMESPACE --no-headers | awk '{print $4}')\n\necho url=$url\n")),(0,r.kt)("h3",{id:"commands"},(0,r.kt)("inlineCode",{parentName:"h3"},"commands")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"commands")," section allows to execute CLI code prior to the Helm chart deployment to make sure all dependencies are met to ensure a successful deployment. Common use for ",(0,r.kt)("inlineCode",{parentName:"p"},"commands")," is to execute Helm dependencies update to collect all the sub-charts required for the deployment."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"grains:\n  nginx:\n    kind: helm\n    spec:\n      source:\n        store: my-repo \n        path: my-asset     \n      agent:\n        name: aws-demo\n      inputs:\n        - replicaCount: '{{ .inputs.replicaCount }}'\n      commands:\n        - dep up bitnami/nginx\n")),(0,r.kt)("h3",{id:"command-arguments"},(0,r.kt)("inlineCode",{parentName:"h3"},"command-arguments")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"command-arguments")," field allows you to specify a set of option flags that will be passed to the ",(0,r.kt)("inlineCode",{parentName:"p"},"helm upgrade")," command when deploying the Helm chart. This lets you customize the upgrade command in the same way you would when running it manually."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"grains:\n  nginx-simple:\n    kind: helm\n    spec:\n      source:\n        store: helm-charts-repo\n        path: helm/nginx\n      command-arguments: '--version 1.2.3 --verify --wait'\n")),(0,r.kt)("p",null,"This will run ",(0,r.kt)("inlineCode",{parentName:"p"},"helm upgrade")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--version 1.2.3 --verify --wait")," flags appended."),(0,r.kt)("h4",{id:"use-case-creating-namespace-automatically"},"Use Case: Creating Namespace Automatically"),(0,r.kt)("p",null,"To create a Kubernetes namespace using Helm if it does not already exist, you can specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"--create-namespace")," flag. This is useful when you want to ensure the target namespace exists before deploying your Helm chart."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"grains:\n  my-app:\n    kind: helm\n    spec:\n      source:\n        store: my-charts-repo\n        path: applications/my-app\n      target-namespace: 'my-new-namespace'\n      agent:\n        name: '{{ .inputs.agent }}'\n      command-arguments: '--create-namespace'\n      inputs:\n        - replicas: 3\n        - environment: production\n")),(0,r.kt)("p",null,"This will run ",(0,r.kt)("inlineCode",{parentName:"p"},"helm upgrade")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--create-namespace")," flag, automatically creating the ",(0,r.kt)("inlineCode",{parentName:"p"},"my-new-namespace")," namespace if it doesn't already exist in the cluster."),(0,r.kt)("h2",{id:"working-with-helm-charts-registries"},"Working with Helm Charts Registries"),(0,r.kt)("p",null,"Managing Helm charts through registries allows for centralized storage and version control of Kubernetes application packages. By using registries, teams can efficiently share and deploy consistent application versions across environments. This approach enhances security, simplifies updates, and improves collaboration."),(0,r.kt)("p",null,"For more detailed information about working with binary repositories, see ",(0,r.kt)("a",{parentName:"p",href:"/blueprint-designer-guide/blueprints/blueprints-yaml-structure#working-with-artifactory-as-binary-repository"},"Working with Artifactory as Binary Repository"),"."),(0,r.kt)("h3",{id:"use-case-example"},"Use-case example"),(0,r.kt)("p",null,"Consider a scenario where your organization needs to deploy applications across multiple environments, each requiring different configurations. By utilizing Helm charts stored in a registry, such as Artifactory or a Git repository, you can streamline the deployment process, ensuring that the correct versions and configurations are applied consistently."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The following example demonstrates how to configure Helm grains to pull charts from different registries, ensuring flexibility and control over your deployments."),(0,r.kt)("h4",{parentName:"div",id:"key-configuration-elements"},"Key Configuration Elements:"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"store")),": Specifies the registry source using the format ",(0,r.kt)("inlineCode",{parentName:"li"},"artifactory/{{ .inputs.source_name }}")," where the source name references a configured Artifactory connection"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"path")),": Defines the location of the Helm chart within the registry, such as ",(0,r.kt)("inlineCode",{parentName:"li"},"helm/{{ .inputs.chart_name }}")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"resource-type")),": Set to ",(0,r.kt)("inlineCode",{parentName:"li"},"helm-chart")," to indicate this source contains a packaged Helm chart rather than raw files"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"strong"},"chart-version")),": (Optional) Specifies the version of the Helm chart to install, such as ",(0,r.kt)("inlineCode",{parentName:"li"},"3.0.0"))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"spec_version: 2\n\ninputs:\n  agent:\n    type: agent\n  source_name:\n    default: 'account-artifactory'\n  chart_name:\n    default: 'app-0.1.0.tgz'\n\ngrains:\n  helm-artifactory:\n    kind: helm\n    spec:\n      source:\n        store: artifactory/{{ .inputs.source_name }}\n        path: helm/{{ .inputs.chart_name }}\n        resource-type: helm-chart\n      agent:        \n        name: '{{.inputs.agent}}'\n      inputs:\n        - replicaCount: 3\n        - nameOverride: {{ .inputs.chart_name }}\n \n  helm-bitnami:\n    kind: helm\n    spec:\n      source:\n        store: artifactory/public-bitnami # points to credentials\n        path: kubernetes-event-exporter\n        resource-type: helm-chart\n        chart-version: 3.0.0 # optional. chart version to install\n      agent:        \n        name: '{{ .inputs.agent }}'\n      inputs:\n        - replicaCount: 2\n \n  helm-git:\n    kind: helm\n    spec:\n      source:\n        path: https://github.com/my-org/my-helm-repo.git//helm/nginx-test\n      agent:\n        name: '{{.inputs.agent}}'\n      commands:\n        - dep up helm/nginx-test\n")))}c.isMDXComponent=!0}}]);