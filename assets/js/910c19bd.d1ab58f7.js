"use strict";(self.webpackChunktorque=self.webpackChunktorque||[]).push([[1306],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=l(n),g=a,m=d["".concat(p,".").concat(g)]||d[g]||c[g]||i;return n?r.createElement(m,u(u({ref:t},s),{},{components:n})):r.createElement(m,u({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,u=new Array(i);u[0]=g;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:a,u[1]=o;for(var l=2;l<i;l++)u[l]=n[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9062:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:15,title:"The Terragrunt Grain"},u="The Terragrunt Grain",o={unversionedId:"blueprint-designer-guide/blueprints/terragrunt-grain",id:"blueprint-designer-guide/blueprints/terragrunt-grain",title:"The Terragrunt Grain",description:"The Terragrunt grain is Torque's native support for Terragrunt modules. Terragrunt is a thin wrapper that provides extra tools for working with multiple Terraform modules and keeping your configurations DRY. Torque allows designers to use Terragrunt-specific features to easily orchestrate self-developed and community Terragrunt modules in a standard way and share them as building blocks.",source:"@site/docs/blueprint-designer-guide/blueprints/terragrunt-grain.md",sourceDirName:"blueprint-designer-guide/blueprints",slug:"/blueprint-designer-guide/blueprints/terragrunt-grain",permalink:"/blueprint-designer-guide/blueprints/terragrunt-grain",editUrl:"https://github.com/QualiTorque/torque-docs/tree/master/docs/blueprint-designer-guide/blueprints/terragrunt-grain.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15,title:"The Terragrunt Grain"},sidebar:"torqueSidebar",previous:{title:"The Terraform Grain",permalink:"/blueprint-designer-guide/blueprints/terraform-grain"},next:{title:"Custom Grain",permalink:"/blueprint-designer-guide/blueprints/custom-grain"}},p={},l=[{value:"Terragrunt Grain Specification",id:"terragrunt-grain-specification",level:2},{value:"Terraform Version",id:"terraform-version",level:3},{value:"Source",id:"source",level:3},{value:"Agent",id:"agent",level:3},{value:"Inputs",id:"inputs",level:3},{value:"Outputs",id:"outputs",level:3},{value:"Blueprint Usage Example",id:"blueprint-usage-example",level:2}],s={toc:l},d="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"the-terragrunt-grain"},"The Terragrunt Grain"),(0,a.kt)("p",null,"The Terragrunt grain is Torque's native support for Terragrunt modules. ",(0,a.kt)("a",{parentName:"p",href:"https://terragrunt.gruntwork.io/"},"Terragrunt")," is a thin wrapper that provides extra tools for working with multiple Terraform modules and keeping your configurations DRY. Torque allows designers to use Terragrunt-specific features to easily orchestrate self-developed and community Terragrunt modules in a standard way and share them as building blocks."),(0,a.kt)("h2",{id:"terragrunt-grain-specification"},"Terragrunt Grain Specification"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"grains:\n  terragrunt-grain:\n    kind: terragrunt\n    tf-version: 1.5.5 # Optional, specify the Terraform version to use\n    spec:\n      source:\n        path: terragrunt/s3-bucket/non-prod/us-east-1/qa/bucket\n        store: my_repository\n      agent:        \n        name: '{{ .inputs.agent }}' # Reference an input to specify the agent\n      inputs:\n        - name: '{{ .inputs.bucket_name }}' # Reference an input as the input value\n      outputs:\n        - bucket_arn # Specify the outputs to capture from the Terragrunt module\n")),(0,a.kt)("p",null,"In the above example, we define a Terragrunt grain named ",(0,a.kt)("inlineCode",{parentName:"p"},"terragrunt-grain"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"kind")," field is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"terragrunt")," to indicate that this is a Terragrunt grain."),(0,a.kt)("h3",{id:"terraform-version"},"Terraform Version"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"tf-version")," field is optional and allows you to specify the Terraform version to use for this Terragrunt module. If not specified, the latest compatible version will be used."),(0,a.kt)("h3",{id:"source"},"Source"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"source")," block specifies the location of the Terragrunt module. The ",(0,a.kt)("inlineCode",{parentName:"p"},"path")," field should point to the root directory of the Terragrunt module, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"store")," field should reference the repository or storage location where the module is stored."),(0,a.kt)("h3",{id:"agent"},"Agent"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"agent")," block specifies the agent to use for executing the Terragrunt module. In the example, we reference an input named ",(0,a.kt)("inlineCode",{parentName:"p"},"agent")," to dynamically specify the agent."),(0,a.kt)("h3",{id:"inputs"},"Inputs"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"inputs")," block is a list of input values to pass to the Terragrunt module. In the example, we reference an input named ",(0,a.kt)("inlineCode",{parentName:"p"},"bucket_name")," as the value for the input named ",(0,a.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,a.kt)("h3",{id:"outputs"},"Outputs"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"outputs")," block is a list of output values to capture from the Terragrunt module. In the example, we specify ",(0,a.kt)("inlineCode",{parentName:"p"},"bucket_arn")," as an output to capture."),(0,a.kt)("h2",{id:"blueprint-usage-example"},"Blueprint Usage Example"),(0,a.kt)("p",null,"Here's an example of how the Terragrunt grain can be used in a Torque blueprint:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"spec_version: 2\n\ninputs:\n  agent:\n    type: agent\n  bucket_name:\n    type: string\n\noutputs:\n  output1:\n    value: 'http://my-env-{{ envId }}/some/api'\n    kind: link\n    quick: true\n  output2:\n    value: '{{ .grains.terragrunt-grain.outputs.bucket_arn }}'     \n\ngrains:\n  terragrunt-grain:\n    kind: terragrunt\n    tf-version: 1.5.5\n    spec:\n      source:\n        path: terragrunt/s3-bucket/non-prod/us-east-1/qa/bucket\n        store: test-spec2-public\n      agent:        \n        name: '{{.inputs.agent}}'\n      inputs:\n        - name: '{{.inputs.bucket_name}}'     \n      outputs:\n        - bucket_arn\n")),(0,a.kt)("p",null,"In this example, we define two inputs: ",(0,a.kt)("inlineCode",{parentName:"p"},"agent")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"bucket_name"),". We also define four outputs, including a link to an external URL, references to the input values, and a reference to the ",(0,a.kt)("inlineCode",{parentName:"p"},"bucket_arn")," output captured from the ",(0,a.kt)("inlineCode",{parentName:"p"},"terragrunt-grain")," grain."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"terragrunt-grain")," grain is defined with the ",(0,a.kt)("inlineCode",{parentName:"p"},"kind")," set to ",(0,a.kt)("inlineCode",{parentName:"p"},"terragrunt"),", and we specify the Terraform version to use (",(0,a.kt)("inlineCode",{parentName:"p"},"1.5.5"),"). The ",(0,a.kt)("inlineCode",{parentName:"p"},"source")," block points to the location of the Terragrunt module, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"agent")," block references the ",(0,a.kt)("inlineCode",{parentName:"p"},"agent")," input value. The ",(0,a.kt)("inlineCode",{parentName:"p"},"inputs")," block includes the ",(0,a.kt)("inlineCode",{parentName:"p"},"bucket_name")," input value, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"outputs")," block specifies ",(0,a.kt)("inlineCode",{parentName:"p"},"bucket_arn")," as an output to capture."),(0,a.kt)("p",null,"When this blueprint is deployed, Torque will execute the Terragrunt module specified in the ",(0,a.kt)("inlineCode",{parentName:"p"},"terragrunt-grain")," grain, passing in the ",(0,a.kt)("inlineCode",{parentName:"p"},"bucket_name")," input value and capturing the ",(0,a.kt)("inlineCode",{parentName:"p"},"bucket_arn")," output value. The captured output value can then be referenced in the blueprint's outputs or used in other parts of the blueprint."))}c.isMDXComponent=!0}}]);